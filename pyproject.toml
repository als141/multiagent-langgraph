[project]
name = "multiagent-langgraph"
version = "0.1.0"
description = "Game-theoretic multi-agent system using LangGraph for evolutionary knowledge dynamics"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Core multi-agent framework - Latest 2025 versions
    "langgraph>=0.4.8",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.3.24",
    
    # OpenAI API integration - Latest 2025 version
    "openai>=1.88.0",
    
    # Data manipulation and scientific computing - Latest 2025 versions
    "numpy>=2.3.0",
    "scipy>=1.15.3",
    "pandas>=2.3.0",
    
    # Graph theory and network analysis - Latest 2025 version
    "networkx>=3.5",
    
    # Data validation and configuration
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",
    
    # Async support
    "aiohttp>=3.10.0",
    
    # Visualization and plotting - Latest 2025 versions
    "matplotlib>=3.10.3",
    "seaborn>=0.13.0",
    "plotly>=5.24.0",
    
    # Logging and monitoring
    "structlog>=24.4.0",
    "rich>=13.9.0",
    
    # Configuration management
    "python-dotenv>=1.0.1",
    "typer>=0.12.0",
    
    # JSON handling and serialization
    "orjson>=3.10.0",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    
    # Code quality tools
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    
    # Jupyter and notebooks
    "jupyter>=1.0.0",
    "ipykernel>=6.26.0",
    "ipywidgets>=8.1.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

experiment = [
    # Advanced scientific computing
    "scikit-learn>=1.3.0",
    "torch>=2.1.0",
    "transformers>=4.35.0",
    
    # Optimization libraries
    "optuna>=3.4.0",
    "hyperopt>=0.2.7",
    
    # Database for experiment tracking
    "sqlalchemy>=2.0.0",
    # Note: sqlite3 is part of Python standard library, no need to install
]

[project.scripts]
multiagent = "multiagent_system.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/multiagent_system"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "-v --cov=src/multiagent_system --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true
